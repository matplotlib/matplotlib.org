# Snippet to allow working with git checkouts of project sites that become
# toplevel directories.
(subproject) {
	# Caddy doesn't know this is a directory, so redirect to trailing / as
	# would usually happen for them.
	redir /{args[1]} /{args[1]}/ permanent

	handle_path /{args[1]}/* {
		root * {{ caddy.site_dir }}/{args[0]}
		try_files {path}.html {path}
		file_server {
			hide .git
		}
	}
}

# Setup webhooks
{% if caddy.tls_config is defined %}
https://{{ caddy.addresses.webhook }} {
	{{ caddy.tls_config }}
{% else %}
http://{{ caddy.addresses.webhook }} {
{% endif %}

	# Include access logs when an error occurs, since we mask any internal errors
	# from escaping to the outside world, but otherwise don't log.
	log {
		output discard
	}
	log errors {
		no_hostname
	}

	root * {{ caddy.site_dir }}

	# https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#delivery-headers
	@valid_webhook {
		path /gh/*
		method POST
		header Content-Type application/json
		header User-Agent GitHub-Hookshot/*
		header X-GitHub-Event ping
		header X-GitHub-Event push
		header X-GitHub-Delivery *
		header X-Hub-Signature-256 *
	}

	handle @valid_webhook {
		reverse_proxy * localhost:1234 {
			# Don't leak out internal problems.
			@error status 4xx 5xx
			handle_response @error {
				log_name errors
				log_append api_error_code {rp.status_code}
				log_append api_error_text {rp.status_text}
				error 400
			}
		}
	}

	handle /ping {
		reverse_proxy * localhost:1234 {
			# Don't leak out internal problems.
			@error status 4xx 5xx
			handle_response @error {
				log_name errors
				log_append api_error_code {rp.status_code}
				log_append api_error_text {rp.status_text}
				error 503
			}
		}
	}

	handle {
		error 404
	}
}

{% if caddy.tls_config is defined %}
https://{{ caddy.addresses.main }}, https://{{ ansible_fqdn }} {
	{{ caddy.tls_config }}
{% else %}
http://{{ caddy.addresses.main }}, http://{{ ansible_fqdn }} {
{% endif %}

	root * {{ caddy.site_dir }}

{% for site, path in repos.items() %}
	import subproject {{ site }} {{ path | default(site, true) }}
{% endfor %}

	# Hide mpl-altair until the site is fixed.
	redir /mpl-altair https://github.com/matplotlib/mpl-altair temporary
	redir /mpl-altair/* https://github.com/matplotlib/mpl-altair temporary

	# redirect the objects.inv
	redir /objects.inv /stable/objects.inv permanent
	# Make search go to the actual docs instead of the mostly-empty brochure site.
	redir /search.html /stable/search.html?{query} temporary

	# Redirect contributing guides to latest version.
	# If you go to /devel/...?reallystable=1 you can avoid the redirect.
	@devel {
		path /stable/devel /stable/devel/*
		not query reallystable=1
	}
	handle @devel {
		route {
			uri strip_prefix /stable
			redir * /devdocs{uri}
		}
	}

	# Redirect the repo-named third-party packages path to the more-generic path.
	redir /3pp /thirdpartypackages/  # And also add a shortcut.
	@mpl-third-party path /mpl-third-party /mpl-third-party/*
	handle @mpl-third-party {
		route {
			uri strip_prefix /mpl-third-party
			redir * /thirdpartypackages{uri}
		}
	}

	# Place the brochure site at the top level.
	@brochure file {
		root {{ caddy.site_dir }}/mpl-brochure-site
		try_files {path}.html {path}
	}
	rewrite / /mpl-brochure-site/index.html
	rewrite @brochure /mpl-brochure-site{http.matchers.file.relative}

	# Redirect any of the old top-level files to the versioned docs.
	redir /citing.html /stable/project/citing.html permanent
	redir /contents.html /stable/users/ permanent
	redir /downloads.html /stable/users/installing/ permanent
	redir /gallery.html /stable/gallery/ permanent
	redir /py-modindex.html /stable/py-modindex.html permanent
{# 3.5.0 was the last version to be synced to the top-level directory.
   We also try for stable, just to go to the best version possible. #}
{%- with old_versions = [
    "stable",
    "3.5.0",
    "3.4.3", "3.4.2", "3.4.1", "3.4.0",
    "3.3.4", "3.3.3", "3.3.2", "3.3.1", "3.3.0",
    "3.2.2", "3.2.1", "3.2.0",
    "3.1.3", "3.1.1", "3.1.0",
    "3.0.3", "3.0.2", "3.0.0",
    "2.2.5", "2.2.4", "2.2.3", "2.2.2", "2.2.0",
    "2.1.2", "2.1.1", "2.1.0",
    "2.0.2", "2.0.1", "2.0.0",
    "1.5.3", "1.5.1", "1.5.0",
    "1.4.3", "1.4.2", "1.4.1", "1.4.0",
    "1.3.1", "1.3.0", "1.2.1",
] %}
{%- with old_toplevel_dirs = [
    "_downloads",
    "_images",
    "_modules",
    "_panels_static",
    "api",
    "devel",
    "examples",
    "faq",
    "gallery",
    "glossary",
    "mpl_examples",
    "mpl_toolkits",
    "plot_directive",
    "plot_types",
    "pyplots",
    "resources",
    "tutorials",
    "users",
] %}
	@old-toplevel-dirs {
		path{% for dir in old_toplevel_dirs %} /{{dir}} /{{dir}}/{% endfor +%}
		file {
			root {{ caddy.site_dir }}/matplotlib.github.com
			try_files{% for version in old_versions %} /{{version}}/{path}/index.html{% endfor +%}
		}
	}
	redir @old-toplevel-dirs {http.matchers.file.relative} permanent
	@old-toplevel-dir-contents {
		path{% for dir in old_toplevel_dirs %} /{{dir}}/*{% endfor +%}
		file {
			root {{ caddy.site_dir }}/matplotlib.github.com
			try_files{% for version in old_versions %} /{{version}}/{path}.html /{{version}}/{path}{% endfor +%}
		}
	}
	redir @old-toplevel-dir-contents {http.matchers.file.relative} permanent
{%- endwith -%}
{%- endwith +%}

	# Finally try any of the versioned docs.
	handle {
		root * {{ caddy.site_dir }}/matplotlib.github.com
		try_files {path}.html {path}
		file_server {
			hide .git
		}
	}

	# Use a custom 404 error page.
	handle_errors {
		@notfound expression {http.error.status_code} == 404
		root * {{ caddy.site_dir }}/mpl-brochure-site
		rewrite @notfound /404.html
		file_server {
			hide .git
		}
	}
}
